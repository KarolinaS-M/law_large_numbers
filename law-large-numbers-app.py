{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import streamlit as st\nimport numpy as np\nimport pandas as pd\n\nst.set_page_config(page_title=\"Bernoulli Frequency Demo\", layout=\"centered\")\nst.title(\"Bernoulli Frequency Demo\")\n\nst.markdown(\n    \"Pick the success probability \\\\(p\\\\). The app simulates Bernoulli trials for \"\n    \"several sample sizes \\\\(n\\\\) and shows the empirical frequency and how far it is \"\n    \"from \\\\(p\\\\) (absolute difference).\"\n)\n\n# --- User controls ---\np = st.slider(\"Choose p\", min_value=0.0, max_value=1.0, value=0.5, step=0.01)\nseed = st.number_input(\"Random seed (optional)\", value=42, step=1)\ninclude_big_n = st.checkbox(\"Include n = 10,000,000 (may take a while)\", value=False)\n\nbase_ns = [10, 50, 100, 1000]\nn_values = base_ns + ([10_000_000] if include_big_n else [])\n\nrun = st.button(\"Run simulation\")\n\n# --- Computation ---\nif run:\n    rng = np.random.default_rng(int(seed))\n\n    rows = []\n    for n in n_values:\n        successes = rng.binomial(n=n, p=p)  # draw number of successes without large arrays\n        result = successes / n\n        abs_diff = abs(result - p)\n        rows.append({\"n\": n, \"result\": result, \"|result - p|\": abs_diff})\n\n    df = pd.DataFrame(rows)\n\n    st.subheader(\"Results\")\n    st.dataframe(\n        df.style.format({\"result\": \"{:.4f}\", \"|result - p|\": \"{:.4f}\"}),\n        use_container_width=True,\n    )\n\n    st.subheader(\"Visualization\")\n    st.line_chart(\n        df.set_index(\"n\")[[\"result\"]],\n        x_label=\"n\",\n        y_label=\"result\",\n    )\n    st.line_chart(\n        df.set_index(\"n\")[[\"|result - p|\"]],\n        x_label=\"n\",\n        y_label=\"|result - p|\",\n    )\n\n    st.caption(\n        \"The theoretical value is p. As n grows, the empirical frequency typically \"\n        \"approaches p and the absolute deviation |result - p| tends to decrease.\"\n    )\nelse:\n    st.info(\"Set parameters and click **Run simulation**.\")","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}